// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.15.8
// source: message.proto

package __

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type FrameDataRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key   []byte `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
	Value []byte `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *FrameDataRequest) Reset() {
	*x = FrameDataRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FrameDataRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FrameDataRequest) ProtoMessage() {}

func (x *FrameDataRequest) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FrameDataRequest.ProtoReflect.Descriptor instead.
func (*FrameDataRequest) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{0}
}

func (x *FrameDataRequest) GetKey() []byte {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *FrameDataRequest) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

type FrameDataResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Successed bool `protobuf:"varint,1,opt,name=successed,proto3" json:"successed,omitempty"`
}

func (x *FrameDataResponse) Reset() {
	*x = FrameDataResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FrameDataResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FrameDataResponse) ProtoMessage() {}

func (x *FrameDataResponse) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FrameDataResponse.ProtoReflect.Descriptor instead.
func (*FrameDataResponse) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{1}
}

func (x *FrameDataResponse) GetSuccessed() bool {
	if x != nil {
		return x.Successed
	}
	return false
}

var File_message_proto protoreflect.FileDescriptor

var file_message_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x05, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x3a, 0x0a, 0x10, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x44,
	0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x22, 0x31, 0x0a, 0x11, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x75, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x73, 0x75, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x65, 0x64, 0x32, 0x57, 0x0a, 0x09, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x4a, 0x0a, 0x11, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x44, 0x61, 0x74, 0x61, 0x43,
	0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x12, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x46, 0x72, 0x61, 0x6d, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x44, 0x61,
	0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x28, 0x01, 0x42, 0x18,
	0x0a, 0x02, 0x2e, 0x2f, 0x42, 0x0c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x50, 0x01, 0x5a, 0x02, 0x2e, 0x2f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_message_proto_rawDescOnce sync.Once
	file_message_proto_rawDescData = file_message_proto_rawDesc
)

func file_message_proto_rawDescGZIP() []byte {
	file_message_proto_rawDescOnce.Do(func() {
		file_message_proto_rawDescData = protoimpl.X.CompressGZIP(file_message_proto_rawDescData)
	})
	return file_message_proto_rawDescData
}

var file_message_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_message_proto_goTypes = []interface{}{
	(*FrameDataRequest)(nil),  // 0: proto.FrameDataRequest
	(*FrameDataResponse)(nil), // 1: proto.FrameDataResponse
}
var file_message_proto_depIdxs = []int32{
	0, // 0: proto.FrameData.FrameDataCallback:input_type -> proto.FrameDataRequest
	1, // 1: proto.FrameData.FrameDataCallback:output_type -> proto.FrameDataResponse
	1, // [1:2] is the sub-list for method output_type
	0, // [0:1] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_message_proto_init() }
func file_message_proto_init() {
	if File_message_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_message_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FrameDataRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FrameDataResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_message_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_message_proto_goTypes,
		DependencyIndexes: file_message_proto_depIdxs,
		MessageInfos:      file_message_proto_msgTypes,
	}.Build()
	File_message_proto = out.File
	file_message_proto_rawDesc = nil
	file_message_proto_goTypes = nil
	file_message_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// FrameDataClient is the client API for FrameData service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type FrameDataClient interface {
	// rpc FrameDataCallback(FrameDataRequest) returns (FrameDataResponse);
	FrameDataCallback(ctx context.Context, opts ...grpc.CallOption) (FrameData_FrameDataCallbackClient, error)
}

type frameDataClient struct {
	cc grpc.ClientConnInterface
}

func NewFrameDataClient(cc grpc.ClientConnInterface) FrameDataClient {
	return &frameDataClient{cc}
}

func (c *frameDataClient) FrameDataCallback(ctx context.Context, opts ...grpc.CallOption) (FrameData_FrameDataCallbackClient, error) {
	stream, err := c.cc.NewStream(ctx, &_FrameData_serviceDesc.Streams[0], "/proto.FrameData/FrameDataCallback", opts...)
	if err != nil {
		return nil, err
	}
	x := &frameDataFrameDataCallbackClient{stream}
	return x, nil
}

type FrameData_FrameDataCallbackClient interface {
	Send(*FrameDataRequest) error
	CloseAndRecv() (*FrameDataResponse, error)
	grpc.ClientStream
}

type frameDataFrameDataCallbackClient struct {
	grpc.ClientStream
}

func (x *frameDataFrameDataCallbackClient) Send(m *FrameDataRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *frameDataFrameDataCallbackClient) CloseAndRecv() (*FrameDataResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(FrameDataResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// FrameDataServer is the server API for FrameData service.
type FrameDataServer interface {
	// rpc FrameDataCallback(FrameDataRequest) returns (FrameDataResponse);
	FrameDataCallback(FrameData_FrameDataCallbackServer) error
}

// UnimplementedFrameDataServer can be embedded to have forward compatible implementations.
type UnimplementedFrameDataServer struct {
}

func (*UnimplementedFrameDataServer) FrameDataCallback(FrameData_FrameDataCallbackServer) error {
	return status.Errorf(codes.Unimplemented, "method FrameDataCallback not implemented")
}

func RegisterFrameDataServer(s *grpc.Server, srv FrameDataServer) {
	s.RegisterService(&_FrameData_serviceDesc, srv)
}

func _FrameData_FrameDataCallback_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(FrameDataServer).FrameDataCallback(&frameDataFrameDataCallbackServer{stream})
}

type FrameData_FrameDataCallbackServer interface {
	SendAndClose(*FrameDataResponse) error
	Recv() (*FrameDataRequest, error)
	grpc.ServerStream
}

type frameDataFrameDataCallbackServer struct {
	grpc.ServerStream
}

func (x *frameDataFrameDataCallbackServer) SendAndClose(m *FrameDataResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *frameDataFrameDataCallbackServer) Recv() (*FrameDataRequest, error) {
	m := new(FrameDataRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _FrameData_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.FrameData",
	HandlerType: (*FrameDataServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "FrameDataCallback",
			Handler:       _FrameData_FrameDataCallback_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "message.proto",
}
